using Endpoint.Core.Abstractions;
using Microsoft.Extensions.Logging;
using System.Text;

namespace {{ namespace }};

public class {{ modelNamePascalCase }}SyntaxGenerationStrategy : SyntaxGenerationStrategyBase<{{ modelNamePascalCase }}Model>
{
    private readonly ILogger<{{ modelNamePascalCase }}SyntaxGenerationStrategy> _logger;
    public {{ modelNamePascalCase }}SyntaxGenerationStrategy(
        IServiceProvider serviceProvider,
        ILogger<{{ modelNamePascalCase }}SyntaxGenerationStrategy> logger) 
        : base(serviceProvider)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public override string Create(ISyntaxGenerationStrategyFactory syntaxGenerationStrategyFactory, {{ modelNamePascalCase }}Model model, dynamic context = null)
    {
        _logger.LogInformation("Generating syntax for {0}.", model);

        var builder = new StringBuilder();


        return builder.ToString();
    }
}
