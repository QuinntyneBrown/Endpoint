using {{ buildingBlocksCoreNamespace }};
using {{ buildingBlocksEventStoreNamespace }};
using FluentValidation;
using MediatR;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using {{ applicationNamespace }}.Interfaces;
using {{ domainNamespace }}.Models;


namespace {{ applicationNamespace }}.Features;

public class {{ namePascalCase }}
{
    public class Validator : AbstractValidator<Request>
    {
        public Validator()
        {
            RuleFor(request => request.{{ entityNamePascalCase }}).NotNull();
            RuleFor(request => request.{{ entityNamePascalCase }}).SetValidator(new {{ entityNamePascalCase }}Validator());
        }
    }

    public class Request : IRequest<Response> { 
        public {{ entityNamePascalCase }}Dto {{ entityNamePascalCase }} { get; set; }        
    }

    public class Response: ResponseBase
    {
        public {{ entityNamePascalCase }}Dto {{ entityNamePascalCase }} { get; set; }
    }

    public class Handler : IRequestHandler<Request, Response>
    {
        private readonly I{{ storePascalCase }} _context;

        public Handler(I{{ storePascalCase }} context){
            _context = context;
        }

        public async Task<Response> Handle(Request request, CancellationToken cancellationToken) {

            var {{ entityNameCamelCase }} = await _context.FindAsync<{{ entityNamePascalCase }}>(request.{{ entityNamePascalCase }}.{{ entityNamePascalCase }}Id);

            _context.Add({{ entityNameCamelCase }});

            await _context.SaveChangesAsync(cancellationToken);

            return new () { 
                {{ entityNamePascalCase }} = {{ entityNameCamelCase }}.ToDto()
            };
        }
    }
}
